// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable CS1591, CS1573, CS0649, CS8019, CS1570, CS1584, CS1658
namespace Microsoft.Windows.Sdk
{
    using global::System;
    using global::System.Diagnostics;
    using global::System.Runtime.InteropServices;

    /// <content>
    /// Contains extern methods into "User32.dll".
    /// </content>
    internal static partial class PInvoke
    {
        /// <inheritdoc cref = "FindWindow(char *, char *)"/>
        internal static unsafe HWND FindWindow(string lpClassName, string lpWindowName)
        {
            fixed (char *lpWindowNameLocal = lpWindowName)
            {
                fixed (char *lpClassNameLocal = lpClassName)
                {
                    return PInvoke.FindWindow(lpClassNameLocal, lpWindowNameLocal);
                }
            }
        }

        /// <summary>Retrieves a handle to the top-level window whose class name and window name match the specified strings. This function does not search child windows. This function does not perform a case-sensitive search.</summary>
        /// <param name = "lpClassName">
        /// <para>Type: <b>LPCTSTR</b></para>
        /// <para>The class name or a class atom created by a previous call to the <a href = "https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-registerclassa">RegisterClass</a> or <a href = "https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-registerclassexa">RegisterClassEx</a> function. The atom must be in the low-order word of <i>lpClassName</i>; the high-order word must be zero.</para>
        /// <para>If <i>lpClassName</i> points to a string, it specifies the window class name. The class name can be any name registered with <a href = "https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-registerclassa">RegisterClass</a> or <a href = "https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-registerclassexa">RegisterClassEx</a>, or any of the predefined control-class names.</para>
        /// <para>If <i>lpClassName</i> is <b>NULL</b>, it finds any window whose title matches the <i>lpWindowName</i> parameter.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-findwindoww#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <param name = "lpWindowName">
        /// <para>Type: <b>LPCTSTR</b></para>
        /// <para>The window name (the window's title). If this parameter is <b>NULL</b>, all window names match.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-findwindoww#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <returns>
        /// <para>Type: <b>HWND</b></para>
        /// <para>If the function succeeds, the return value is a handle to the window that has the specified class name and window name.</para>
        /// <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call <a href = "/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
        /// </returns>
        /// <remarks>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-findwindoww">Learn more about this API from docs.microsoft.com</see>.</para>
        /// </remarks>
        [DllImport("User32", ExactSpelling = true, EntryPoint = "FindWindowW", SetLastError = true)]
        internal static extern unsafe HWND FindWindow([In, Optional] char *lpClassName, [In, Optional] char *lpWindowName);
        /// <summary>Retrieves or sets the value of one of the system-wide parameters.</summary>
        /// <param name = "uiAction">
        /// <para>Type: <b>UINT</b> The system-wide parameter to be retrieved or set. The possible values are organized in the following tables of related parameters: </para>
        /// <para>This doc was truncated.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-systemparametersinfow#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <param name = "uiParam">
        /// <para>Type: <b>UINT</b></para>
        /// <para>A parameter whose usage and format depends on the system parameter being queried or set. For more information about system-wide parameters, see the <i>uiAction</i> parameter. If not otherwise indicated, you must specify zero for this parameter.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-systemparametersinfow#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <param name = "pvParam">
        /// <para>Type: <b>PVOID</b></para>
        /// <para>A parameter whose usage and format depends on the system parameter being queried or set. For more information about system-wide parameters, see the <i>uiAction</i> parameter. If not otherwise indicated, you must specify <b>NULL</b> for this parameter. For information on the <b>PVOID</b> datatype, see <a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">Windows Data Types</a>.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-systemparametersinfow#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <param name = "fWinIni">
        /// <para>Type: <b>UINT</b></para>
        /// <para>If a system parameter is being set, specifies whether the user profile is to be updated, and if so, whether the <a href = "https://docs.microsoft.com/windows/desktop/winmsg/wm-settingchange">WM_SETTINGCHANGE</a> message is to be broadcast to all top-level windows to notify them of the change.</para>
        /// <para>This parameter can be zero if you do not want to update the user profile or broadcast the <a href = "https://docs.microsoft.com/windows/desktop/winmsg/wm-settingchange">WM_SETTINGCHANGE</a> message, or it can be one or more of the following values.</para>
        /// <para></para>
        /// <para>This doc was truncated.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-systemparametersinfow#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <returns>
        /// <para>Type: <b>BOOL</b></para>
        /// <para>If the function succeeds, the return value is a nonzero value.</para>
        /// <para>If the function fails, the return value is zero. To get extended error information, call <a href = "/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
        /// </returns>
        /// <remarks>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-systemparametersinfow">Learn more about this API from docs.microsoft.com</see>.</para>
        /// </remarks>
        [DllImport("User32", ExactSpelling = true, EntryPoint = "SystemParametersInfoW", SetLastError = true)]
        internal static extern unsafe bool SystemParametersInfo(uint uiAction, uint uiParam, [Out, Optional] void *pvParam, uint fWinIni);
        /// <summary>Destroys an icon and frees any memory the icon occupied.</summary>
        /// <param name = "hIcon">
        /// <para>Type: <b>HICON</b></para>
        /// <para>A handle to the icon to be destroyed. The icon must not be in use.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-destroyicon#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <returns>
        /// <para>Type: <b>BOOL</b></para>
        /// <para>If the function succeeds, the return value is nonzero.</para>
        /// <para>If the function fails, the return value is zero. To get extended error information, call <a href = "/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
        /// </returns>
        /// <remarks>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-destroyicon">Learn more about this API from docs.microsoft.com</see>.</para>
        /// </remarks>
        [DllImport("User32", ExactSpelling = true, SetLastError = true)]
        internal static extern bool DestroyIcon(HICON hIcon);
        /// <summary>Destroys the specified menu and frees any memory that the menu occupies.</summary>
        /// <param name = "hMenu">
        /// <para>Type: <b>HMENU</b></para>
        /// <para>A handle to the menu to be destroyed.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-destroymenu#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <returns>
        /// <para>Type: <b>BOOL</b></para>
        /// <para>If the function succeeds, the return value is nonzero.</para>
        /// <para>If the function fails, the return value is zero. To get extended error information, call <a href = "/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
        /// </returns>
        /// <remarks>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-destroymenu">Learn more about this API from docs.microsoft.com</see>.</para>
        /// </remarks>
        [DllImport("User32", ExactSpelling = true, SetLastError = true)]
        internal static extern bool DestroyMenu(HMENU hMenu);
        /// <inheritdoc cref = "CreateWindowEx(uint, char *, char *, uint, int, int, int, int, HWND, SafeHandle, SafeHandle, void *)"/>
        internal static unsafe HWND CreateWindowEx(uint dwExStyle, string lpClassName, string lpWindowName, uint dwStyle, int X, int Y, int nWidth, int nHeight, HWND hWndParent, SafeHandle hMenu, SafeHandle hInstance, void *lpParam)
        {
            fixed (char *lpWindowNameLocal = lpWindowName)
            {
                fixed (char *lpClassNameLocal = lpClassName)
                {
                    return PInvoke.CreateWindowEx(dwExStyle, lpClassNameLocal, lpWindowNameLocal, dwStyle, X, Y, nWidth, nHeight, hWndParent, hMenu, hInstance, lpParam);
                }
            }
        }

        /// <summary>Creates an overlapped, pop-up, or child window with an extended window style; otherwise, this function is identical to the CreateWindow function.</summary>
        /// <param name = "dwExStyle">
        /// <para>Type: <b>DWORD</b></para>
        /// <para>The extended window style of the window being created. For a list of possible values, see  <a href = "https://docs.microsoft.com/windows/desktop/winmsg/extended-window-styles">Extended Window Styles</a>.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-createwindowexw#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <param name = "lpClassName">
        /// <para>Type: <b>LPCTSTR</b></para>
        /// <para>A <b>null</b>-terminated string or a class atom created by a previous call to the <a href = "https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-registerclassa">RegisterClass</a> or <a href = "https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-registerclassexa">RegisterClassEx</a> function. The atom must be in the low-order word of <i>lpClassName</i>; the high-order word must be zero. If <i>lpClassName</i> is a string, it specifies the window class name. The class name can be any name registered with <b>RegisterClass</b> or <b>RegisterClassEx</b>, provided that the module that registers the class is also the module that creates the window. The class name can also be any of the predefined <a href = "https://docs.microsoft.com/windows/desktop/winmsg/about-window-classes">system class</a> names.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-createwindowexw#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <param name = "lpWindowName">
        /// <para>Type: <b>LPCTSTR</b></para>
        /// <para>The window name. If the window style specifies a title bar, the window title pointed to by <i>lpWindowName</i> is displayed in the title bar. When using <a href = "https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-createwindowa">CreateWindow</a> to create controls, such as buttons, check boxes, and static controls, use <i>lpWindowName</i> to specify the text of the control. When creating a static control with the <b>SS_ICON</b> style, use <i>lpWindowName</i> to specify the icon name or identifier. To specify an identifier, use the syntax "#<i>num</i>".</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-createwindowexw#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <param name = "dwStyle">
        /// <para>Type: <b>DWORD</b></para>
        /// <para>The style of the window being created. This parameter can be a combination of the <a href = "https://docs.microsoft.com/windows/desktop/winmsg/window-styles">window style values</a>, plus the control styles indicated in the Remarks section.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-createwindowexw#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <param name = "X">
        /// <para>Type: <b>int</b></para>
        /// <para>The initial horizontal position of the window. For an overlapped or pop-up window, the <i>x</i> parameter is the initial x-coordinate of the window's upper-left corner, in screen coordinates. For a child window, <i>x</i> is the x-coordinate of the upper-left corner of the window relative to the upper-left corner of the parent window's client area. If <i>x</i> is set to <b>CW_USEDEFAULT</b>, the system selects the default position for the window's upper-left corner and ignores the <i>y</i> parameter. <b>CW_USEDEFAULT</b> is valid only for overlapped windows; if it is specified for a pop-up or child window, the <i>x</i> and <i>y</i> parameters are set to zero.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-createwindowexw#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <param name = "Y">
        /// <para>Type: <b>int</b></para>
        /// <para>The initial vertical position of the window. For an overlapped or pop-up window, the <i>y</i> parameter is the initial y-coordinate of the window's upper-left corner, in screen coordinates. For a child window, <i>y</i> is the initial y-coordinate of the upper-left corner of the child window relative to the upper-left corner of the parent window's client area. For a list box <i>y</i> is the initial y-coordinate of the upper-left corner of the list box's client area relative to the upper-left corner of the parent window's client area.</para>
        /// <para>If an overlapped window is created with the <b>WS_VISIBLE</b> style bit set and the <i>x</i> parameter is set to <b>CW_USEDEFAULT</b>, then the <i>y</i> parameter determines how the window is shown. If the <i>y</i> parameter is <b>CW_USEDEFAULT</b>, then the window manager calls <a href = "https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-showwindow">ShowWindow</a> with the <b>SW_SHOW</b> flag after the window has been created. If the <i>y</i> parameter is some other value, then the window manager calls <b>ShowWindow</b> with that value as the <i>nCmdShow</i> parameter.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-createwindowexw#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <param name = "nWidth">
        /// <para>Type: <b>int</b></para>
        /// <para>The width, in device units, of the window. For overlapped windows, <i>nWidth</i> is the window's width, in screen coordinates, or <b>CW_USEDEFAULT</b>. If <i>nWidth</i> is <b>CW_USEDEFAULT</b>, the system selects a default width and height for the window; the default width extends from the initial x-coordinates to the right edge of the screen; the default height extends from the initial y-coordinate to the top of the icon area. <b>CW_USEDEFAULT</b> is valid only for overlapped windows; if <b>CW_USEDEFAULT</b> is specified for a pop-up or child window, the <i>nWidth</i> and <i>nHeight</i> parameter are set to zero.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-createwindowexw#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <param name = "nHeight">
        /// <para>Type: <b>int</b></para>
        /// <para>The height, in device units, of the window. For overlapped windows, <i>nHeight</i> is the window's height, in screen coordinates. If the <i>nWidth</i> parameter is set to <b>CW_USEDEFAULT</b>, the system ignores <i>nHeight</i>.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-createwindowexw#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <param name = "hWndParent">
        /// <para>Type: <b>HWND</b></para>
        /// <para>A handle to the parent or owner window of the window being created. To create a child window or an owned window, supply a valid window handle. This parameter is optional for pop-up windows.</para>
        /// <para>To create a <a href = "https://docs.microsoft.com/windows/desktop/winmsg/window-features">message-only window</a>, supply <b>HWND_MESSAGE</b> or a handle to an existing message-only window.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-createwindowexw#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <param name = "hMenu">
        /// <para>Type: <b>HMENU</b></para>
        /// <para>A handle to a menu, or specifies a child-window identifier, depending on the window style. For an overlapped or pop-up window, <i>hMenu</i> identifies the menu to be used with the window; it can be <b>NULL</b> if the class menu is to be used. For a child window, <i>hMenu</i> specifies the child-window identifier, an integer value used by a dialog box control to notify its parent about events. The application determines the child-window identifier; it must be unique for all child windows with the same parent window.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-createwindowexw#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <param name = "hInstance">
        /// <para>Type: <b>HINSTANCE</b></para>
        /// <para>A handle to the instance of the module to be associated with the window.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-createwindowexw#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <param name = "lpParam">
        /// <para>Type: <b>LPVOID</b></para>
        /// <para>Pointer to a value to be passed to the window through the <a href = "https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-createstructa">CREATESTRUCT</a> structure (<b>lpCreateParams</b> member) pointed to by the <i>lParam</i> param of the <b>WM_CREATE</b> message.  This message is sent to the created window by this function before it returns.</para>
        /// <para>If an application calls <a href = "https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-createwindowa">CreateWindow</a> to create a MDI client window, <i>lpParam</i> should point to a <a href = "https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-clientcreatestruct">CLIENTCREATESTRUCT</a> structure. If an MDI client window calls <b>CreateWindow</b> to create an MDI child window, <i>lpParam</i> should point to a <a href = "https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-mdicreatestructa">MDICREATESTRUCT</a> structure. <i>lpParam</i> may be <b>NULL</b> if no additional data is needed.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-createwindowexw#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <returns>
        /// <para>Type: <b>HWND</b></para>
        /// <para>If the function succeeds, the return value is a handle to the new window.</para>
        /// <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call <a href = "/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
        /// <para>This function typically fails for one of the following reasons:</para>
        /// <para></para>
        /// <para>This doc was truncated.</para>
        /// </returns>
        /// <remarks>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-createwindowexw">Learn more about this API from docs.microsoft.com</see>.</para>
        /// </remarks>
        [DllImport("User32", ExactSpelling = true, EntryPoint = "CreateWindowExW", SetLastError = true)]
        internal static extern unsafe HWND CreateWindowEx(uint dwExStyle, [In, Optional] char *lpClassName, [In, Optional] char *lpWindowName, uint dwStyle, int X, int Y, int nWidth, int nHeight, HWND hWndParent, SafeHandle hMenu, SafeHandle hInstance, [In, Optional] void *lpParam);
        /// <summary>Calls the default window procedure to provide default processing for any window messages that an application does not process.</summary>
        /// <param name = "hWnd">
        /// <para>Type: <b>HWND</b></para>
        /// <para>A handle to the window procedure that received the message.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-defwindowprocw#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <param name = "Msg">
        /// <para>Type: <b>UINT</b></para>
        /// <para>The message.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-defwindowprocw#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <param name = "wParam">
        /// <para>Type: <b>WPARAM</b></para>
        /// <para>Additional message information. The content of this parameter depends on the value of the <i>Msg</i> parameter.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-defwindowprocw#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <param name = "lParam">
        /// <para>Type: <b>LPARAM</b></para>
        /// <para>Additional message information. The content of this parameter depends on the value of the <i>Msg</i> parameter.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-defwindowprocw#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <returns>
        /// <para>Type: <b>LRESULT</b></para>
        /// <para>The return value is the result of the message processing and depends on the message.</para>
        /// </returns>
        /// <remarks>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-defwindowprocw">Learn more about this API from docs.microsoft.com</see>.</para>
        /// </remarks>
        [DllImport("User32", ExactSpelling = true, EntryPoint = "DefWindowProcW")]
        internal static extern LRESULT DefWindowProc(HWND hWnd, uint Msg, WPARAM wParam, LPARAM lParam);
        /// <summary>Destroys a cursor and frees any memory the cursor occupied. Do not use this function to destroy a shared cursor.</summary>
        /// <param name = "hCursor">
        /// <para>Type: <b>HCURSOR</b></para>
        /// <para>A handle to the cursor to be destroyed. The cursor must not be in use.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-destroycursor#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <returns>
        /// <para>Type: <b>BOOL</b></para>
        /// <para>If the function succeeds, the return value is nonzero.</para>
        /// <para>If the function fails, the return value is zero. To get extended error information, call <a href = "/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
        /// </returns>
        /// <remarks>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-destroycursor">Learn more about this API from docs.microsoft.com</see>.</para>
        /// </remarks>
        [DllImport("User32", ExactSpelling = true, SetLastError = true)]
        internal static extern bool DestroyCursor(HCURSOR hCursor);
        /// <inheritdoc cref = "RegisterClass(WNDCLASSW*)"/>
        internal static unsafe ushort RegisterClass(in WNDCLASSW lpWndClass)
        {
            fixed (WNDCLASSW*lpWndClassLocal = &lpWndClass)
            {
                return PInvoke.RegisterClass(lpWndClassLocal);
            }
        }

        /// <summary>Registers a window class for subsequent use in calls to the CreateWindow or CreateWindowEx function.</summary>
        /// <param name = "lpWndClass">
        /// <para>Type: <b>const WNDCLASS*</b></para>
        /// <para>A pointer to a <a href = "https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-wndclassa">WNDCLASS</a> structure. You must fill the structure with the appropriate class attributes before passing it to the function.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-registerclassw#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <returns>
        /// <para>Type: <b>ATOM</b></para>
        /// <para>If the function succeeds, the return value is a class atom that uniquely identifies the class being registered. This atom can only be used by the <a href = "/windows/desktop/api/winuser/nf-winuser-createwindowa">CreateWindow</a>, <a href = "/windows/desktop/api/winuser/nf-winuser-createwindowexa">CreateWindowEx</a>, <a href = "/windows/desktop/api/winuser/nf-winuser-getclassinfoa">GetClassInfo</a>, <a href = "/windows/desktop/api/winuser/nf-winuser-getclassinfoexa">GetClassInfoEx</a>, <a href = "/windows/desktop/api/winuser/nf-winuser-findwindowa">FindWindow</a>, <a href = "/windows/desktop/api/winuser/nf-winuser-findwindowexa">FindWindowEx</a>, and <a href = "/windows/desktop/api/winuser/nf-winuser-unregisterclassa">UnregisterClass</a> functions and the <b>IActiveIMMap::FilterClientWindows</b> method.</para>
        /// <para>If the function fails, the return value is zero. To get extended error information, call <a href = "/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
        /// </returns>
        /// <remarks>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-registerclassw">Learn more about this API from docs.microsoft.com</see>.</para>
        /// </remarks>
        [DllImport("User32", ExactSpelling = true, EntryPoint = "RegisterClassW", SetLastError = true)]
        internal static extern unsafe ushort RegisterClass([In] WNDCLASSW*lpWndClass);
        /// <inheritdoc cref = "RegisterWindowMessage(char *)"/>
        internal static unsafe uint RegisterWindowMessage(string lpString)
        {
            fixed (char *lpStringLocal = lpString)
            {
                return PInvoke.RegisterWindowMessage(lpStringLocal);
            }
        }

        /// <summary>Defines a new window message that is guaranteed to be unique throughout the system. The message value can be used when sending or posting messages.</summary>
        /// <param name = "lpString">
        /// <para>Type: <b>LPCTSTR</b></para>
        /// <para>The message to be registered.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-registerwindowmessagew#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <returns>
        /// <para>Type: <b>UINT</b></para>
        /// <para>If the message is successfully registered, the return value is a message identifier in the range 0xC000 through 0xFFFF.</para>
        /// <para>If the function fails, the return value is zero. To get extended error information, call <a href = "/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
        /// </returns>
        /// <remarks>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-registerwindowmessagew">Learn more about this API from docs.microsoft.com</see>.</para>
        /// </remarks>
        [DllImport("User32", ExactSpelling = true, EntryPoint = "RegisterWindowMessageW", SetLastError = true)]
        internal static extern unsafe uint RegisterWindowMessage([In] char *lpString);
        /// <summary>Destroys the specified window.</summary>
        /// <param name = "hWnd">
        /// <para>Type: <b>HWND</b></para>
        /// <para>A handle to the window to be destroyed.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-destroywindow#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <returns>
        /// <para>Type: <b>BOOL</b></para>
        /// <para>If the function succeeds, the return value is nonzero.</para>
        /// <para>If the function fails, the return value is zero. To get extended error information, call <a href = "/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
        /// </returns>
        /// <remarks>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-destroywindow">Learn more about this API from docs.microsoft.com</see>.</para>
        /// </remarks>
        [DllImport("User32", ExactSpelling = true, SetLastError = true)]
        internal static extern bool DestroyWindow(HWND hWnd);
        /// <summary>Brings the thread that created the specified window into the foreground and activates the window.</summary>
        /// <param name = "hWnd">
        /// <para>Type: <b>HWND</b></para>
        /// <para>A handle to the window that should be activated and brought to the foreground.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setforegroundwindow#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <returns>
        /// <para>Type: <b>BOOL</b> If the window was brought to the foreground, the return value is nonzero.</para>
        /// <para>If the window was not brought to the foreground, the return value is zero.</para>
        /// </returns>
        /// <remarks>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setforegroundwindow">Learn more about this API from docs.microsoft.com</see>.</para>
        /// </remarks>
        [DllImport("User32", ExactSpelling = true)]
        internal static extern bool SetForegroundWindow(HWND hWnd);
        /// <summary>Retrieves the current double-click time for the mouse.</summary>
        /// <returns>
        /// <para>Type: <b>UINT</b></para>
        /// <para>The return value specifies the current double-click time, in milliseconds. The maximum return value is 5000 milliseconds.</para>
        /// </returns>
        /// <remarks>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getdoubleclicktime">Learn more about this API from docs.microsoft.com</see>.</para>
        /// </remarks>
        [DllImport("User32", ExactSpelling = true)]
        internal static extern uint GetDoubleClickTime();
        /// <inheritdoc cref = "GetPhysicalCursorPos(POINT*)"/>
        internal static unsafe bool GetPhysicalCursorPos(out POINT lpPoint)
        {
            fixed (POINT*lpPointLocal = &lpPoint)
            {
                return PInvoke.GetPhysicalCursorPos(lpPointLocal);
            }
        }

        /// <summary>Retrieves the position of the cursor in physical coordinates.</summary>
        /// <param name = "lpPoint">
        /// <para>Type: <b>LPPOINT</b></para>
        /// <para>The position of the cursor, in physical coordinates.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getphysicalcursorpos#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <returns>
        /// <para>Type: <b>BOOL</b></para>
        /// <para><b>TRUE</b> if successful; otherwise <b>FALSE</b>.</para>
        /// <para><a href = "/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a> can be called to get more information about any error that is generated.</para>
        /// </returns>
        /// <remarks>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getphysicalcursorpos">Learn more about this API from docs.microsoft.com</see>.</para>
        /// </remarks>
        [DllImport("User32", ExactSpelling = true, SetLastError = true)]
        internal static extern unsafe bool GetPhysicalCursorPos([Out] POINT*lpPoint);
        /// <inheritdoc cref = "GetCursorPos(POINT*)"/>
        internal static unsafe bool GetCursorPos(out POINT lpPoint)
        {
            fixed (POINT*lpPointLocal = &lpPoint)
            {
                return PInvoke.GetCursorPos(lpPointLocal);
            }
        }

        /// <summary>Retrieves the position of the mouse cursor, in screen coordinates.</summary>
        /// <param name = "lpPoint">
        /// <para>Type: <b>LPPOINT</b></para>
        /// <para>A pointer to a <a href = "https://docs.microsoft.com/previous-versions/dd162805(v=vs.85)">POINT</a> structure that receives the screen coordinates of the cursor.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getcursorpos#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <returns>
        /// <para>Type: <b>BOOL</b></para>
        /// <para>Returns nonzero if successful or zero otherwise. To get extended error information, call <a href = "/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
        /// </returns>
        /// <remarks>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getcursorpos">Learn more about this API from docs.microsoft.com</see>.</para>
        /// </remarks>
        [DllImport("User32", ExactSpelling = true, SetLastError = true)]
        internal static extern unsafe bool GetCursorPos([Out] POINT*lpPoint);
        /// <summary>Retrieves the window handle to the active window attached to the calling thread's message queue.</summary>
        /// <returns>
        /// <para>Type: <b>HWND</b></para>
        /// <para>The return value is the handle to the active window attached to the calling thread's message queue. Otherwise, the return value is <b>NULL</b>.</para>
        /// </returns>
        /// <remarks>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getactivewindow">Learn more about this API from docs.microsoft.com</see>.</para>
        /// </remarks>
        [DllImport("User32", ExactSpelling = true)]
        internal static extern HWND GetActiveWindow();
        /// <summary>Returns the dots per inch (dpi) value for the associated window.</summary>
        /// <param name = "hwnd">The window you want to get information about.</param>
        /// <returns>The DPI for the window which depends on the <a href = "/windows/desktop/api/windef/ne-windef-dpi_awareness">DPI_AWARENESS</a> of the window. See the Remarks for more information. An invalid <i>hwnd</i> value will result in a return value of 0.</returns>
        /// <remarks>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getdpiforwindow">Learn more about this API from docs.microsoft.com</see>.</para>
        /// </remarks>
        [DllImport("User32", ExactSpelling = true)]
        internal static extern uint GetDpiForWindow(HWND hwnd);
        /// <summary>Changes the size, position, and Z order of a child, pop-up, or top-level window. These windows are ordered according to their appearance on the screen. The topmost window receives the highest rank and is the first window in the Z order.</summary>
        /// <param name = "hWnd">
        /// <para>Type: <b>HWND</b></para>
        /// <para>A handle to the window.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setwindowpos#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <param name = "hWndInsertAfter">
        /// <para>Type: <b>HWND</b></para>
        /// <para>A handle to the window to precede the positioned window in the Z order. This parameter must be a window handle or one of the following values.</para>
        /// <para></para>
        /// <para>This doc was truncated.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setwindowpos#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <param name = "X">
        /// <para>Type: <b>int</b></para>
        /// <para>The new position of the left side of the window, in client coordinates.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setwindowpos#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <param name = "Y">
        /// <para>Type: <b>int</b></para>
        /// <para>The new position of the top of the window, in client coordinates.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setwindowpos#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <param name = "cx">
        /// <para>Type: <b>int</b></para>
        /// <para>The new width of the window, in pixels.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setwindowpos#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <param name = "cy">
        /// <para>Type: <b>int</b></para>
        /// <para>The new height of the window, in pixels.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setwindowpos#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <param name = "uFlags">
        /// <para>Type: <b>UINT</b></para>
        /// <para>The window sizing and positioning flags. This parameter can be a combination of the following values.</para>
        /// <para></para>
        /// <para>This doc was truncated.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setwindowpos#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <returns>
        /// <para>Type: <b>BOOL</b></para>
        /// <para>If the function succeeds, the return value is nonzero.</para>
        /// <para>If the function fails, the return value is zero. To get extended error information, call <a href = "/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
        /// </returns>
        /// <remarks>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setwindowpos">Learn more about this API from docs.microsoft.com</see>.</para>
        /// </remarks>
        [DllImport("User32", ExactSpelling = true, SetLastError = true)]
        internal static extern bool SetWindowPos(HWND hWnd, HWND hWndInsertAfter, int X, int Y, int cx, int cy, uint uFlags);
        /// <summary>The MonitorFromWindow function retrieves a handle to the display monitor that has the largest area of intersection with the bounding rectangle of a specified window.</summary>
        /// <param name = "hwnd">A handle to the window of interest.</param>
        /// <param name = "dwFlags">
        /// <para>Determines the function's return value if the window does not intersect any display monitor.</para>
        /// <para>This parameter can be one of the following values.</para>
        /// <para></para>
        /// <para>This doc was truncated.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-monitorfromwindow#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <returns>
        /// <para>If the window intersects one or more display monitor rectangles, the return value is an <b>HMONITOR</b> handle to the display monitor that has the largest area of intersection with the window.</para>
        /// <para>If the window does not intersect a display monitor, the return value depends on the value of <i>dwFlags</i>.</para>
        /// </returns>
        /// <remarks>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-monitorfromwindow">Learn more about this API from docs.microsoft.com</see>.</para>
        /// </remarks>
        [DllImport("User32", ExactSpelling = true)]
        internal static extern nint MonitorFromWindow(HWND hwnd, uint dwFlags);
        /// <inheritdoc cref = "GetWindowRect(HWND, RECT*)"/>
        internal static unsafe bool GetWindowRect(HWND hWnd, out RECT lpRect)
        {
            fixed (RECT*lpRectLocal = &lpRect)
            {
                return PInvoke.GetWindowRect(hWnd, lpRectLocal);
            }
        }

        /// <summary>Retrieves the dimensions of the bounding rectangle of the specified window. The dimensions are given in screen coordinates that are relative to the upper-left corner of the screen.</summary>
        /// <param name = "hWnd">
        /// <para>Type: <b>HWND</b></para>
        /// <para>A handle to the window.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getwindowrect#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <param name = "lpRect">
        /// <para>Type: <b>LPRECT</b></para>
        /// <para>A pointer to a  <a href = "https://docs.microsoft.com/windows/desktop/api/windef/ns-windef-rect">RECT</a> structure that receives the screen coordinates of the upper-left and lower-right corners of the window.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getwindowrect#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <returns>
        /// <para>Type: <b>BOOL</b></para>
        /// <para>If the function succeeds, the return value is nonzero.</para>
        /// <para>If the function fails, the return value is zero. To get extended error information, call <a href = "/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
        /// </returns>
        /// <remarks>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getwindowrect">Learn more about this API from docs.microsoft.com</see>.</para>
        /// </remarks>
        [DllImport("User32", ExactSpelling = true, SetLastError = true)]
        internal static extern unsafe bool GetWindowRect(HWND hWnd, [Out] RECT*lpRect);
        /// <inheritdoc cref = "GetMonitorInfo(nint, MONITORINFO*)"/>
        internal static unsafe bool GetMonitorInfo(nint hMonitor, ref MONITORINFO lpmi)
        {
            fixed (MONITORINFO*lpmiLocal = &lpmi)
            {
                return PInvoke.GetMonitorInfo(hMonitor, lpmiLocal);
            }
        }

        /// <summary>The GetMonitorInfo function retrieves information about a display monitor.</summary>
        /// <param name = "hMonitor">A handle to the display monitor of interest.</param>
        /// <param name = "lpmi">
        /// <para>A pointer to a <a href = "https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-monitorinfo">MONITORINFO</a> or <a href = "https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-monitorinfoexa">MONITORINFOEX</a> structure that receives information about the specified display monitor.</para>
        /// <para>You must set the <b>cbSize</b> member of the structure to sizeof(MONITORINFO) or sizeof(MONITORINFOEX) before calling the <b>GetMonitorInfo</b> function. Doing so lets the function determine the type of structure you are passing to it.</para>
        /// <para>The <a href = "https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-monitorinfoexa">MONITORINFOEX</a> structure is a superset of the <a href = "https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-monitorinfo">MONITORINFO</a> structure. It has one additional member: a string that contains a name for the display monitor. Most applications have no use for a display monitor name, and so can save some bytes by using a <b>MONITORINFO</b> structure.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getmonitorinfow#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <returns>
        /// <para>If the function succeeds, the return value is nonzero.</para>
        /// <para>If the function fails, the return value is zero.</para>
        /// </returns>
        /// <remarks>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getmonitorinfow">Learn more about this API from docs.microsoft.com</see>.</para>
        /// </remarks>
        [DllImport("User32", ExactSpelling = true, EntryPoint = "GetMonitorInfoW")]
        internal static extern unsafe bool GetMonitorInfo(nint hMonitor, [In, Out] MONITORINFO*lpmi);
        /// <inheritdoc cref = "CreateIcon(SafeHandle, int, int, byte, byte, byte *, byte *)"/>
        internal static unsafe DestroyIconSafeHandle CreateIcon(SafeHandle hInstance, int nWidth, int nHeight, byte cPlanes, byte cBitsPixel, in byte lpbANDbits, in byte lpbXORbits)
        {
            fixed (byte *lpbXORbitsLocal = &lpbXORbits)
            {
                fixed (byte *lpbANDbitsLocal = &lpbANDbits)
                {
                    return PInvoke.CreateIcon(hInstance, nWidth, nHeight, cPlanes, cBitsPixel, lpbANDbitsLocal, lpbXORbitsLocal);
                }
            }
        }

        /// <summary>Creates an icon that has the specified size, colors, and bit patterns.</summary>
        /// <param name = "hInstance">
        /// <para>Type: <b>HINSTANCE</b></para>
        /// <para>A handle to the instance of the module creating the icon.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-createicon#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <param name = "nWidth">
        /// <para>Type: <b>int</b></para>
        /// <para>The width, in pixels, of the icon.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-createicon#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <param name = "nHeight">
        /// <para>Type: <b>int</b></para>
        /// <para>The height, in pixels, of the icon.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-createicon#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <param name = "cPlanes">
        /// <para>Type: <b>BYTE</b></para>
        /// <para>The number of planes in the XOR bitmask of the icon.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-createicon#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <param name = "cBitsPixel">
        /// <para>Type: <b>BYTE</b></para>
        /// <para>The number of bits-per-pixel in the XOR bitmask of the icon.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-createicon#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <param name = "lpbANDbits">
        /// <para>Type: <b>const BYTE*</b></para>
        /// <para>An array of bytes that contains the bit values for the AND bitmask of the icon. This bitmask describes a monochrome bitmap.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-createicon#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <param name = "lpbXORbits">
        /// <para>Type: <b>const BYTE*</b></para>
        /// <para>An array of bytes that contains the bit values for the XOR bitmask of the icon. This bitmask describes a monochrome or device-dependent color bitmap.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-createicon#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <returns>
        /// <para>Type: <b>HICON</b></para>
        /// <para>If the function succeeds, the return value is a handle to an icon.</para>
        /// <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call <a href = "/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
        /// </returns>
        /// <remarks>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-createicon">Learn more about this API from docs.microsoft.com</see>.</para>
        /// </remarks>
        [DllImport("User32", ExactSpelling = true, SetLastError = true)]
        internal static extern unsafe DestroyIconSafeHandle CreateIcon(SafeHandle hInstance, int nWidth, int nHeight, byte cPlanes, byte cBitsPixel, [In] byte *lpbANDbits, [In] byte *lpbXORbits);
        /// <summary>Retrieves a handle to the desktop window. The desktop window covers the entire screen. The desktop window is the area on top of which other windows are painted.</summary>
        /// <returns>
        /// <para>Type: <b>HWND</b></para>
        /// <para>The return value is a handle to the desktop window.</para>
        /// </returns>
        /// <remarks>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getdesktopwindow">Learn more about this API from docs.microsoft.com</see>.</para>
        /// </remarks>
        [DllImport("User32", ExactSpelling = true)]
        internal static extern HWND GetDesktopWindow();
        /// <inheritdoc cref = "GetClientRect(HWND, RECT*)"/>
        internal static unsafe bool GetClientRect(HWND hWnd, out RECT lpRect)
        {
            fixed (RECT*lpRectLocal = &lpRect)
            {
                return PInvoke.GetClientRect(hWnd, lpRectLocal);
            }
        }

        /// <summary>Retrieves the coordinates of a window's client area.</summary>
        /// <param name = "hWnd">
        /// <para>Type: <b>HWND</b></para>
        /// <para>A handle to the window whose client coordinates are to be retrieved.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getclientrect#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <param name = "lpRect">
        /// <para>Type: <b>LPRECT</b></para>
        /// <para>A pointer to a <a href = "https://docs.microsoft.com/windows/desktop/api/windef/ns-windef-rect">RECT</a> structure that receives the client coordinates. The <b>left</b> and <b>top</b> members are zero. The <b>right</b> and <b>bottom</b> members contain the width and height of the window.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getclientrect#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <returns>
        /// <para>Type: <b>BOOL</b></para>
        /// <para>If the function succeeds, the return value is nonzero.</para>
        /// <para>If the function fails, the return value is zero. To get extended error information, call <a href = "/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
        /// </returns>
        /// <remarks>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getclientrect">Learn more about this API from docs.microsoft.com</see>.</para>
        /// </remarks>
        [DllImport("User32", ExactSpelling = true, SetLastError = true)]
        internal static extern unsafe bool GetClientRect(HWND hWnd, [Out] RECT*lpRect);
        /// <inheritdoc cref = "LoadIcon(SafeHandle, char *)"/>
        internal static unsafe DestroyIconSafeHandle LoadIcon(SafeHandle hInstance, string lpIconName)
        {
            fixed (char *lpIconNameLocal = lpIconName)
            {
                return PInvoke.LoadIcon(hInstance, lpIconNameLocal);
            }
        }

        /// <summary>Loads the specified icon resource from the executable (.exe) file associated with an application instance.</summary>
        /// <param name = "hInstance">
        /// <para>Type: <b>HINSTANCE</b></para>
        /// <para>A handle to an instance of the module whose executable file contains the icon to be loaded. This parameter must be <b>NULL</b> when a standard icon is being loaded.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-loadiconw#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <param name = "lpIconName">
        /// <para>Type: <b>LPCTSTR</b> The name of the icon resource to be loaded. Alternatively, this parameter can contain the resource identifier in the low-order word and zero in the high-order word. Use the <a href = "https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-makeintresourcea">MAKEINTRESOURCE</a> macro to create this value. To use one of the predefined icons, set the <i>hInstance</i> parameter to <b>NULL</b> and the <i>lpIconName</i> parameter to one of the following values. </para>
        /// <para>This doc was truncated.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-loadiconw#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <returns>
        /// <para>Type: <b>HICON</b></para>
        /// <para>If the function succeeds, the return value is a handle to the newly loaded icon.</para>
        /// <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call <a href = "/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
        /// </returns>
        /// <remarks>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-loadiconw">Learn more about this API from docs.microsoft.com</see>.</para>
        /// </remarks>
        [DllImport("User32", ExactSpelling = true, EntryPoint = "LoadIconW", SetLastError = true)]
        internal static extern unsafe DestroyIconSafeHandle LoadIcon(SafeHandle hInstance, [In] char *lpIconName);
        /// <inheritdoc cref = "UpdateLayeredWindow(HWND, SafeHandle, POINT*, SIZE*, SafeHandle, POINT*, uint, BLENDFUNCTION*, uint)"/>
        internal static unsafe bool UpdateLayeredWindow(HWND hWnd, SafeHandle hdcDst, POINT? pptDst, SIZE? psize, SafeHandle hdcSrc, POINT? pptSrc, uint crKey, BLENDFUNCTION? pblend, uint dwFlags)
        {
            POINT pptDstLocal = pptDst.HasValue ? pptDst.Value : default(POINT);
            SIZE psizeLocal = psize.HasValue ? psize.Value : default(SIZE);
            POINT pptSrcLocal = pptSrc.HasValue ? pptSrc.Value : default(POINT);
            BLENDFUNCTION pblendLocal = pblend.HasValue ? pblend.Value : default(BLENDFUNCTION);
            return PInvoke.UpdateLayeredWindow(hWnd, hdcDst, pptDst.HasValue ? &pptDstLocal : null, psize.HasValue ? &psizeLocal : null, hdcSrc, pptSrc.HasValue ? &pptSrcLocal : null, crKey, pblend.HasValue ? &pblendLocal : null, dwFlags);
        }

        /// <summary>Updates the position, size, shape, content, and translucency of a layered window.</summary>
        /// <param name = "hWnd">
        /// <para>Type: <b>HWND</b></para>
        /// <para>A handle to a layered window. A layered window is created by specifying <b>WS_EX_LAYERED</b> when creating the window with the <a href = "https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-createwindowexa">CreateWindowEx</a> function.</para>
        /// <para><b>Windows 8:  </b>The <b>WS_EX_LAYERED</b> style is supported for top-level windows and child windows. Previous Windows versions support <b>WS_EX_LAYERED</b> only for top-level windows.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-updatelayeredwindow#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <param name = "hdcDst">
        /// <para>Type: <b>HDC</b></para>
        /// <para>A handle to a DC for the screen. This handle is obtained by specifying <b>NULL</b> when calling the  function. It is used for palette color matching when the window contents are updated. If <i>hdcDst</i> is<b>NULL</b>, the default palette will be used.</para>
        /// <para>If <i>hdcSrc</i> is <b>NULL</b>, <i>hdcDst</i> must be <b>NULL</b>.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-updatelayeredwindow#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <param name = "pptDst">
        /// <para>Type: <b><a href = "https://docs.microsoft.com/previous-versions/dd162805(v=vs.85)">POINT</a>*</b></para>
        /// <para>A pointer to a structure that specifies the new screen position of the layered window. If the current position is not changing, <i>pptDst</i> can be <b>NULL</b>.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-updatelayeredwindow#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <param name = "psize">
        /// <para>Type: <b><a href = "https://docs.microsoft.com/previous-versions/dd145106(v=vs.85)">SIZE</a>*</b></para>
        /// <para>A pointer to a structure that specifies the new size of the layered window. If the size of the window is not changing, <i>psize</i> can be <b>NULL</b>. If <i>hdcSrc</i> is <b>NULL</b>, <i>psize</i> must be <b>NULL</b>.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-updatelayeredwindow#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <param name = "hdcSrc">
        /// <para>Type: <b>HDC</b></para>
        /// <para>A handle to a DC for the surface that defines the layered window. This handle can be obtained by calling the <a href = "https://docs.microsoft.com/windows/desktop/api/wingdi/nf-wingdi-createcompatibledc">CreateCompatibleDC</a> function. If the shape and visual context of the window are not changing, <i>hdcSrc</i> can be <b>NULL</b>.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-updatelayeredwindow#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <param name = "pptSrc">
        /// <para>Type: <b><a href = "https://docs.microsoft.com/previous-versions/dd162805(v=vs.85)">POINT</a>*</b></para>
        /// <para>A pointer to a structure that specifies the location of the layer in the device context. If <i>hdcSrc</i> is <b>NULL</b>, <i>pptSrc</i> should be <b>NULL</b>.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-updatelayeredwindow#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <param name = "crKey">
        /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/gdi/colorref">COLORREF</a></b></para>
        /// <para>A structure that specifies the color key to be used when composing the layered window. To generate a <a href = "https://docs.microsoft.com/windows/desktop/gdi/colorref">COLORREF</a>, use the <a href = "https://docs.microsoft.com/windows/desktop/api/wingdi/nf-wingdi-rgb">RGB</a> macro.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-updatelayeredwindow#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <param name = "pblend">
        /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/wingdi/ns-wingdi-blendfunction">BLENDFUNCTION</a>*</b></para>
        /// <para>A pointer to a structure that specifies the transparency value to be used when composing the layered window.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-updatelayeredwindow#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <param name = "dwFlags">
        /// <para>Type: <b>DWORD</b></para>
        /// <para>This parameter can be one of the following values.</para>
        /// <para></para>
        /// <para>This doc was truncated.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-updatelayeredwindow#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <returns>
        /// <para>Type: <b>BOOL</b></para>
        /// <para>If the function succeeds, the return value is nonzero.</para>
        /// <para>If the function fails, the return value is zero. To get extended error information, call <a href = "/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
        /// </returns>
        /// <remarks>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-updatelayeredwindow">Learn more about this API from docs.microsoft.com</see>.</para>
        /// </remarks>
        [DllImport("User32", ExactSpelling = true, SetLastError = true)]
        internal static extern unsafe bool UpdateLayeredWindow(HWND hWnd, SafeHandle hdcDst, [In, Optional] POINT*pptDst, [In, Optional] SIZE*psize, SafeHandle hdcSrc, [In, Optional] POINT*pptSrc, uint crKey, [In, Optional] BLENDFUNCTION*pblend, uint dwFlags);
    }
}